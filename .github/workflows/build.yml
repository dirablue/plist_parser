name: Build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # runs the CI each 3 days
    - cron: "0 0 */3 * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
      - run: flutter --version

      - name: Install dependencies
        run: dart pub get

      - name: Analyze
        run: dart analyze --fatal-infos --fatal-warnings

      - name: Format code
        run: dart format . --set-exit-if-changed

      - name: Run tests
        run: flutter test --coverage

      - name: Install coverage tools
        run: dart pub global activate coverage

      - name: Generate LCOV report
        run: dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib

      - name: Generate HTML coverage report
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y lcov
          genhtml coverage/lcov.info -o coverage/html --title "Plist Parser Coverage Report" --ignore-errors unmapped,inconsistent

      - name: Display coverage summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          lcov --summary coverage/lcov.info >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Failed to generate summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä Detailed HTML report available in artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/lcov.info
            coverage/html/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          verbose: true

      - name: Coverage comment (PR only)
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title: "Coverage Report"

      - name: Check coverage threshold
        run: |
          # Extract and display coverage information
          echo "üìä Coverage Analysis:"
          lcov --summary coverage/lcov.info 2>&1 || echo "Failed to generate coverage summary"
          
          # Extract coverage percentage from lcov summary
          COVERAGE_PERCENTAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+%' | head -1 | sed 's/%//' || echo "0")
          echo "Detected coverage: ${COVERAGE_PERCENTAGE}%"
          
          # Convert to integer for comparison (multiply by 10 to handle decimal)
          COVERAGE_INT=$(echo "$COVERAGE_PERCENTAGE" | cut -d. -f1)
          COVERAGE_DEC=$(echo "$COVERAGE_PERCENTAGE" | cut -d. -f2)
          COVERAGE_TOTAL=$((COVERAGE_INT * 100 + COVERAGE_DEC))
          
          # Check if coverage meets our standards
          if [ "$COVERAGE_TOTAL" -ge 10000 ]; then
            echo "‚úÖ Perfect coverage achieved: ${COVERAGE_PERCENTAGE}%"
          elif [ "$COVERAGE_TOTAL" -ge 9500 ]; then
            echo "‚úÖ Excellent coverage: ${COVERAGE_PERCENTAGE}%"
          elif [ "$COVERAGE_TOTAL" -ge 9000 ]; then
            echo "‚úÖ Good coverage: ${COVERAGE_PERCENTAGE}%"
          else
            echo "‚ö†Ô∏è Coverage could be improved: ${COVERAGE_PERCENTAGE}%"
          fi
