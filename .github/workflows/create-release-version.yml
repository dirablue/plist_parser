name: Create Release Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type for the release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check if running on develop branch
        run: |
          CURRENT_BRANCH="${{ github.ref_name }}"
          echo "Current branch: $CURRENT_BRANCH"
          
          if [ "$CURRENT_BRANCH" != "develop" ]; then
            echo "❌ Error: This workflow can only be run on the develop branch"
            echo "Current branch: $CURRENT_BRANCH"
            echo "Please switch to the develop branch and try again"
            exit 1
          fi
          
          echo "✅ Running on develop branch - proceeding with release version creation"

      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      - name: Get dependencies
        run: dart pub get

      - name: Run tests
        run: flutter test --coverage

      - name: Generate coverage report for artifact
        run: |
          echo "Generating coverage report..."
          dart pub global activate coverage
          dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib
          
          # Generate HTML coverage report for easier viewing (with error handling)
          sudo apt-get update -qq
          sudo apt-get install -y lcov
          echo "Attempting to generate HTML coverage report..."
          genhtml coverage/lcov.info -o coverage/html --title "Release Coverage Report" --ignore-errors unmapped,inconsistent || {
            echo "genhtml failed, creating simple coverage report..."
            mkdir -p coverage/html
            echo "<html><body><h1>Coverage Report</h1><p>HTML generation failed, but LCOV data is available in artifacts.</p></body></html>" > coverage/html/index.html
          }
          
          # Display coverage summary
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          lcov --summary coverage/lcov.info >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Failed to generate summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-coverage-report
          path: |
            coverage/lcov.info
            coverage/html/
          retention-days: 30

      - name: Reset all uncommitted changes
        run: |
          echo "Resetting all uncommitted changes after test coverage..."
          # Reset all tracked files to HEAD
          git reset --hard HEAD
          # Remove all untracked files and directories
          git clean -fd
          # Show status for verification
          echo "Git status after cleanup:"
          git status

      - name: Determine next version
        id: next-version
        run: |
          # Get current version from pubspec.yaml
          CURRENT_VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: //' | tr -d ' ')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version (assuming semantic versioning)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          echo "Parsed version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          
          # Get version type from manual input
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          # Calculate new version
          case $VERSION_TYPE in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="${NEW_MAJOR}.0.0"
              ;;
            minor)
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
              ;;
            patch)
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              ;;
            *)
              echo "Unknown version type: $VERSION_TYPE"
              exit 1
              ;;
          esac
          
          echo "Next version: $NEW_VERSION (${VERSION_TYPE})"
          echo "next_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: Update version files and commit to develop
        run: |
          NEW_VERSION="${{ steps.next-version.outputs.next_version }}"
          VERSION_TYPE="${{ steps.next-version.outputs.version_type }}"
          LATEST_TAG=$(git describe --tags --abbrev=0 origin/master 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            COMMIT_RANGE="origin/develop"
          else
            COMMIT_RANGE="${LATEST_TAG}..HEAD"
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 1. Update pubspec.yaml version
          sed -i'' -e "s/^version:.*/version: $NEW_VERSION/" pubspec.yaml
          echo "Updated pubspec.yaml to version $NEW_VERSION"
          
          # 2. Update README.md version
          sed -i'' -e "s/plist_parser: \".*\"/plist_parser: \"^$NEW_VERSION\"/" README.md
          echo "Updated README.md to version ^$NEW_VERSION"
          
          # 3. Update CHANGELOG.md
          # Create temporary changelog entry
          echo "## $NEW_VERSION" > changelog_entry.md
          echo "" >> changelog_entry.md
          
          # Add features
          FEATURES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --grep="feat:" --grep="feature:" 2>/dev/null | head -10)
          if [ -n "$FEATURES" ]; then
            echo "### Features" >> changelog_entry.md
            echo "$FEATURES" >> changelog_entry.md
            echo "" >> changelog_entry.md
          fi
          
          # Add bug fixes
          FIXES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --grep="fix:" --grep="bugfix:" 2>/dev/null | head -10)
          if [ -n "$FIXES" ]; then
            echo "### Bug Fixes" >> changelog_entry.md
            echo "$FIXES" >> changelog_entry.md
            echo "" >> changelog_entry.md
          fi
          
          # Add breaking changes
          BREAKING=$(git log $COMMIT_RANGE --pretty=format:"- %s" --grep="BREAKING CHANGE" --grep="breaking change" 2>/dev/null | head -5)
          if [ -n "$BREAKING" ]; then
            echo "### Breaking Changes" >> changelog_entry.md
            echo "$BREAKING" >> changelog_entry.md
            echo "" >> changelog_entry.md
          fi
          
          # Add other significant changes
          OTHER_CHANGES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --grep="chore:" --grep="docs:" --grep="security:" 2>/dev/null | head -5)
          if [ -n "$OTHER_CHANGES" ]; then
            echo "### Other Changes" >> changelog_entry.md
            echo "$OTHER_CHANGES" >> changelog_entry.md
            echo "" >> changelog_entry.md
          fi
          
          # If no categorized changes found, add recent commits
          if [ -z "$FEATURES" ] && [ -z "$FIXES" ] && [ -z "$BREAKING" ] && [ -z "$OTHER_CHANGES" ]; then
            RECENT_CHANGES=$(git log $COMMIT_RANGE --pretty=format:"- %s" 2>/dev/null | head -5)
            if [ -n "$RECENT_CHANGES" ]; then
              echo "### Changes" >> changelog_entry.md
              echo "$RECENT_CHANGES" >> changelog_entry.md
              echo "" >> changelog_entry.md
            fi
          fi
          
          # Prepend to existing CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> changelog_entry.md
            mv changelog_entry.md CHANGELOG.md
          else
            mv changelog_entry.md CHANGELOG.md
          fi
          
          echo "Updated CHANGELOG.md with version $NEW_VERSION"
          
          # Commit all changes together
          git add pubspec.yaml README.md CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION" \
                     -m "Update pubspec.yaml version to $NEW_VERSION" \
                     -m "Update README.md dependency version to ^$NEW_VERSION" \
                     -m "Update CHANGELOG.md with release notes for $NEW_VERSION"
          git push origin develop
          echo "Successfully updated all version files and committed to develop"

      - name: Create or update release branch
        run: |
          NEW_VERSION="${{ steps.next-version.outputs.next_version }}"
          
          # Check if release branch exists
          if git show-ref --quiet refs/remotes/origin/release; then
            echo "Release branch exists, updating it"
            git checkout release
            git pull origin release
            git merge develop --no-ff -m "chore: merge develop into release for v$NEW_VERSION"
          else
            echo "Creating new release branch from develop"
            git checkout -b release
          fi
          
          git push origin release
          echo "Release branch updated with develop changes"

      - name: Check if release PR already exists
        id: check-pr
        run: |
          # Check if there's already an open PR from release to master
          EXISTING_PR=$(gh pr list --base master --head release --state open --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_PR" ]; then
            echo "Release PR #$EXISTING_PR already exists"
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            echo "No existing release PR found"
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog for PR
        if: steps.check-pr.outputs.pr_exists == 'false'
        id: changelog
        run: |
          NEW_VERSION="${{ steps.next-version.outputs.next_version }}"
          LATEST_TAG=$(git describe --tags --abbrev=0 origin/master 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            COMMIT_RANGE="origin/release"
          else
            COMMIT_RANGE="${LATEST_TAG}..origin/release"
          fi
          
          echo "## Changes in v$NEW_VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          # Extract from CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            # Extract the section for this version from CHANGELOG.md
            awk "/^## $NEW_VERSION/,/^## /" CHANGELOG.md | head -n -1 >> release_notes.md
          else
            echo "### Changes" >> release_notes.md
            git log $COMMIT_RANGE --pretty=format:"- %s" 2>/dev/null | head -20 >> release_notes.md || echo "- Initial release" >> release_notes.md
          fi
          
          # Set output for PR body
          {
            echo "changelog<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create release PR from release to master
        if: steps.check-pr.outputs.pr_exists == 'false'
        run: |
          NEW_VERSION="${{ steps.next-version.outputs.next_version }}"
          VERSION_TYPE="${{ steps.next-version.outputs.version_type }}"
          
          PR_TITLE="🚀 Release v$NEW_VERSION"
          
          PR_BODY="## Release v$NEW_VERSION
          
          This PR contains changes ready for release from the release branch to master.
          
          **Version Type:** $VERSION_TYPE
          
          ### What happens when this PR is merged:
          1. Version will be tagged as v$NEW_VERSION
          2. Package will be automatically published to pub.dev
          3. GitHub release will be created with changelog
          
          ${{ steps.changelog.outputs.changelog }}
          
          ---
          
          **Instructions:**
          - Review the changes above
          - Merge this PR to trigger the automated release process
          - The package will be automatically published to pub.dev after merge
          
          _This PR was automatically created by the release workflow._"
          
          # Create PR from release to master
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base master \
            --head release || echo "Failed to create PR"
          
          # Try to add labels (ignore if they don't exist)
          PR_NUMBER=$(gh pr list --base master --head release --state open --json number --jq '.[0].number' 2>/dev/null || echo "")
          if [ -n "$PR_NUMBER" ]; then
            gh pr edit $PR_NUMBER --add-label "release" 2>/dev/null || echo "Label 'release' not found, skipping"
            gh pr edit $PR_NUMBER --add-label "auto-generated" 2>/dev/null || echo "Label 'auto-generated' not found, skipping"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release PR
        if: steps.check-pr.outputs.pr_exists == 'true'
        run: |
          NEW_VERSION="${{ steps.next-version.outputs.next_version }}"
          VERSION_TYPE="${{ steps.next-version.outputs.version_type }}"
          PR_NUMBER="${{ steps.check-pr.outputs.pr_number }}"
          
          # Generate changelog for update
          LATEST_TAG=$(git describe --tags --abbrev=0 origin/master 2>/dev/null || echo "")
          
          echo "## Changes in v$NEW_VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -f CHANGELOG.md ]; then
            awk "/^## $NEW_VERSION/,/^## /" CHANGELOG.md | head -n -1 >> release_notes.md
          else
            echo "### Changes" >> release_notes.md
            echo "- Version bump to $NEW_VERSION" >> release_notes.md
          fi
          
          if [ -n "$PR_NUMBER" ] && [ -n "$NEW_VERSION" ]; then
            # Update PR title
            gh pr edit $PR_NUMBER --title "🚀 Release v$NEW_VERSION"
            
            # Update PR body with latest changelog
            PR_BODY="## Release v$NEW_VERSION
            
            This PR contains changes ready for release from the release branch to master.
            
            **Version Type:** $VERSION_TYPE
            
            ### What happens when this PR is merged:
            1. Version will be tagged as v$NEW_VERSION
            2. Package will be automatically published to pub.dev
            3. GitHub release will be created with changelog
            
            $(cat release_notes.md)
            
            ---
            
            **Instructions:**
            - Review the changes above
            - Merge this PR to trigger the automated release process
            - The package will be automatically published to pub.dev after merge
            
            _This PR was automatically updated by the release workflow._"
            
            gh pr edit $PR_NUMBER --body "$PR_BODY"
            
            # Add a comment about the update
            gh pr comment $PR_NUMBER \
              --body "🔄 **Release PR Updated**
              
              The release PR has been updated with the latest changes from release branch.
              - Version updated to: **v$NEW_VERSION**
              - All version files (pubspec.yaml, README.md, CHANGELOG.md) have been synchronized
              - PR title and description have been refreshed
              
              The release is ready for review and merge."
              
            echo "Successfully updated existing PR #$PR_NUMBER to version $NEW_VERSION"
          else
            echo "Missing PR_NUMBER ($PR_NUMBER) or NEW_VERSION ($NEW_VERSION), skipping update"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          NEW_VERSION="${{ steps.next-version.outputs.next_version }}"
          VERSION_TYPE="${{ steps.next-version.outputs.version_type }}"
          
          echo "🎉 Release preparation completed!"
          echo ""
          echo "📋 Summary:"
          echo "- Version: $NEW_VERSION ($VERSION_TYPE)"
          echo "- Files updated: pubspec.yaml, README.md, CHANGELOG.md"
          echo "- Changes committed to develop branch"
          echo "- Release branch updated"
          echo "- Release PR created/updated (release → master)"
          echo ""
          echo "🚀 Next steps:"
          echo "1. Review the created/updated PR"
          echo "2. Merge the PR to trigger automatic release"
          echo "3. The package will be published to pub.dev automatically"